# -*- coding: utf-8 -*-
"""EDA_MAIN_MSFT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1umXha5CZfPiQWo_k8YVr1txCFjzU-8P1

## Data loading

### Subtask:
Load the data from "MSFT_1.csv" into a pandas DataFrame.
"""

import pandas as pd

df = pd.read_csv('MSFT_1.csv')
print(df.shape)
display(df.head())

"""## Data exploration

### Subtask:
Explore the loaded data to understand its structure and characteristics.

**Reasoning**:
Examine the data shape, inspect data types, generate descriptive statistics, check for missing values, and understand the distribution of numerical data.
"""

print(df.shape)
print(df.dtypes)
print(df.describe())
print(df.isnull().sum())
# For numerical data distribution, we can use histograms and box plots, but since we are only exploring the data, we can skip this part.

"""**Reasoning**:
Explore categorical columns (if applicable) by analyzing unique values and their frequencies. In this case, we only have 'Company' and 'Date' as potential categorical columns.


"""

print(df['Company'].unique())
print(df['Company'].value_counts())
print(df['Date'].unique())
print(df['Date'].value_counts())

"""## Data visualization

### Subtask:
Visualize the distribution of numerical features and the correlation matrix of the data.

**Reasoning**:
Visualize the distribution of numerical features using histograms and box plots, and create a heatmap of the correlation matrix.
"""

import matplotlib.pyplot as plt
import seaborn as sns

# Create histograms for numerical features
numerical_features = ['Close', 'Volume', 'Inflation_Index', 'CPI', 'GDP']
for feature in numerical_features:
    plt.figure(figsize=(8, 6))
    plt.hist(df[feature], bins=30)
    plt.xlabel(feature)
    plt.ylabel('Frequency')
    plt.title(f'Histogram of {feature}')
    plt.show()

# Create box plots for numerical features
for feature in numerical_features:
    plt.figure(figsize=(8, 6))
    plt.boxplot(df[feature])
    plt.ylabel(feature)
    plt.title(f'Box Plot of {feature}')
    plt.show()

# Create a heatmap of the correlation matrix
correlation_matrix = df[numerical_features].corr()
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix of Numerical Features')
plt.show()

"""## Data analysis

### Subtask:
Analyze the correlation matrix to identify potential multicollinearity issues.

**Reasoning**:
Calculate the correlation matrix for numerical features and identify highly correlated pairs.
"""

# Calculate the correlation matrix for numerical features
numerical_features = ['Close', 'Volume', 'Inflation_Index', 'CPI', 'GDP']
correlation_matrix = df[numerical_features].corr()

# Identify pairs of variables with a correlation coefficient above 0.8
threshold = 0.8
highly_correlated_pairs = []
for i in range(len(correlation_matrix.columns)):
  for j in range(i + 1, len(correlation_matrix.columns)):
    if abs(correlation_matrix.iloc[i, j]) > threshold:
      highly_correlated_pairs.append(
          (correlation_matrix.columns[i], correlation_matrix.columns[j],
           correlation_matrix.iloc[i, j]))

# Print the highly correlated pairs
print("Highly correlated pairs:")
for pair in highly_correlated_pairs:
  print(f"{pair[0]} and {pair[1]}: {pair[2]}")

"""## Summary:

### 1. Q&A

* **Are there any multicollinearity issues in the data?**
Yes, there are multicollinearity issues. The analysis identified several pairs of variables with high correlation coefficients, including "Close" and "CPI" (0.895), "Close" and "GDP" (0.919), and "CPI" and "GDP" (0.992).


### 2. Data Analysis Key Findings

* **High Correlation between "Close" and "CPI/GDP":**  "Close" has a strong positive correlation with both "CPI" (0.895) and "GDP" (0.919).
* **High Correlation between "CPI" and "GDP":** "CPI" and "GDP" are highly correlated with a coefficient of 0.992.
* **Potential Multicollinearity:** These high correlations suggest that there might be multicollinearity issues in the data, meaning that these variables might be providing redundant information.


### 3. Insights or Next Steps

* **Address Multicollinearity:**  Consider strategies to address the identified multicollinearity, such as removing one of the correlated variables or using techniques like Principal Component Analysis (PCA) to reduce dimensionality.
* **Further Analysis with VIF:** Calculate Variance Inflation Factors (VIF) to quantify the severity of multicollinearity and guide the selection of appropriate strategies for handling it.

"""